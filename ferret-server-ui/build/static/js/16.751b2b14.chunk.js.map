{"version":3,"sources":["components/common/page-header/page-header.tsx","components/common/page-header/page-header.module.scss","queries/script.ts","components/common/form/card.tsx","components/common/form/card.module.scss","components/common/form/panel.module.scss","components/common/form/fields/descr.tsx","components/common/form/fields/name.tsx","common/graphql/mutation/cache-update.ts","components/common/form/panel.tsx","components/common/form/form.tsx","common/form/is-valid.ts","components/pages/home/project/scripts/script/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","PageHeader","antd__WEBPACK_IMPORTED_MODULE_0__","classnames__WEBPACK_IMPORTED_MODULE_1__","classnames__WEBPACK_IMPORTED_MODULE_1___default","n","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","css","require","React","memo","props","a","createElement","Object","assign","className","cn","ph","module","exports","findQuery","gql","_templateObject","getQuery","_templateObject2","createMutation","_templateObject3","updateMutation","_templateObject4","deleteMutation","_templateObject5","runMutation","_templateObject6","FormCard","_ref","children","card","button","TextArea","Input","DescriptionField","form","_ref$value","value","react_default","es_form","Item","label","getFieldDecorator","initialValue","rules","min","rows","NameField","_ref$type","type","required","message","concat","input","updateFormCache","key","query","variables","values","cache","mutationResult","id","current","readQuery","metadata","data","output","next","objectSpread","writeQuery","defineProperty","FormPanel","_this$props","this","title","onBack","page_header","extra","__renderButtons","_this$props2","onCancel","onSave","onDelete","touched","valid","buttons","push","es_button","icon","disabled","onClick","PureComponent","FormContainer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","__renderForm","bind","assertThisInitialized","__handleCompletedMutation","__handleError","__updateCache","_this2","projectId","fetch","create","update","mutation","isEmpty","react_apollo_esm","skip","__isNew","onError","onCompleted","fn","mr","qr","mutate","handleDelete","_this3","del","delete","loading","undefined","error","isFieldsTouched","isFormValid","errors","every","field","isPlainObject","getFieldsError","titleStr","handleSave","validateFieldsAndScroll","err","handleCancel","resetFields","client","then","_","catch","c","resolvedChildren","Fragment","spin","spinning","Children","map","child","idx","toFixed","panel_FormPanel","_this$props3","onCreate","notification","_this$props4","__getFormValues","getFieldsValue","Component","Form","name","ScriptDetailsPage","scriptId","getParam","navigate","slicePathBack","form_form","script","str","react","row","gutter","col","lg","description","valuePropName","get","es_checkbox","script_TextArea","minLength","Page"],"mappings":"2FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,KAAAK,EAAAL,EAAA,IAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAIME,EAAMC,EAAQ,KAIPR,EAAaS,IAAMC,KAAY,SAACC,GACzC,OAAOL,EAAAM,EAAAC,cAACZ,EAAA,EAADa,OAAAC,OAAA,GAAYJ,EAAZ,CAAmBK,UAAWC,IAAGV,EAAIW,GAAIP,EAAMK,qCCR1DG,EAAAC,QAAA,CAAkBF,GAAA,goFCCX,IAAMG,EAAYC,IAAHC,KAaTC,EAAWF,IAAHG,KAkBRC,EAAiBJ,IAAHK,KAUdC,EAAiBN,IAAHO,KAiBdC,EAAiBR,IAAHS,KAadC,EAAcV,IAAHW,uCCzExBpC,EAAAC,EAAAC,EAAA,sBAAAmC,IAAA,IAAAjC,EAAAJ,EAAA,KAAAK,EAAAL,EAAA,IAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAIME,EAAMC,EAAQ,KAMP0B,EAAWzB,IAAMC,KAAY,SAAAyB,GAAoC,IAAjCC,EAAiCD,EAAjCC,SAAUpB,EAAuBmB,EAAvBnB,UACnD,OAAOV,EAAAM,EAAAC,cAACZ,EAAA,EAAD,CAAMe,UAAWC,IAAGV,EAAI8B,KAAMrB,IAAaoB,0BCVtDjB,EAAAC,QAAA,CAAkBiB,KAAA,yCCAlBlB,EAAAC,QAAA,CAAkBkB,OAAA,mMCGVC,EAAaC,IAAbD,SAMO,SAASE,EAATN,GAA4D,IAAhCO,EAAgCP,EAAhCO,KAAgCC,EAAAR,EAA1BS,aAA0B,IAAAD,EAAlB,GAAkBA,EACvE,OACIE,EAAAjC,EAAAC,cAACiC,EAAA,EAAKC,KAAN,CAAWC,MAAM,eACZN,EAAKO,kBAAkB,cAAe,CACnCC,aAAcN,EACdO,MAAO,CACH,CACIC,IAAK,MAJhBV,CAOEG,EAAAjC,EAAAC,cAAC0B,EAAD,CAAUc,KAAM,MCXhB,SAASC,EAATnB,GAAgE,IAA3CO,EAA2CP,EAA3CO,KAA2CC,EAAAR,EAArCS,aAAqC,IAAAD,EAA7B,GAA6BA,EAAAY,EAAApB,EAAzBqB,YAAyB,IAAAD,EAAlB,GAAkBA,EAC3E,OACIV,EAAAjC,EAAAC,cAACiC,EAAA,EAAKC,KAAN,CAAWC,MAAM,QACZN,EAAKO,kBAAkB,OAAQ,CAC5BC,aAAcN,EACdO,MAAO,CACH,CACIM,UAAU,EACVC,QAAO,gBAAAC,OAAkBH,EAAlB,WAEX,CACIJ,IAAK,KARhBV,CAWEG,EAAAjC,EAAAC,cAAC+C,EAAA,EAAD,uHClBR,SAASC,EACZC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGA,GAAiB,MAAbF,EAAOG,GAAY,CACnB,IACMC,EADIH,EAAMI,UAAe,CAAEP,QAAOC,cACtBF,GACZS,EAAWJ,EAAeK,KAAOL,EAAeK,KAAKC,OAAS,GAC9DC,EAAI5D,OAAA6D,EAAA,EAAA7D,CAAA,GAAQuD,EAAYE,EAAaN,GAE3CC,EAAMU,WAAgB,CAClBb,QACAS,KAAK1D,OAAA+D,EAAA,EAAA/D,CAAA,GACAgD,EAAMY,qCCnBjBnE,EAAMC,EAAQ,KAaCsE,mLACI,IAAAC,EACSC,KAAKrE,MAAvBsE,EADSF,EACTE,MAAOC,EADEH,EACFG,OAEf,OACIrC,EAAAjC,EAAAC,cAACsE,EAAA,EAAD,CACIF,MAAOA,EACPC,OAAQA,EACRE,MAAOJ,KAAKK,8DAKO,IAAAC,EAC4BN,KAAKrE,MAApD4E,EADmBD,EACnBC,SAAUC,EADSF,EACTE,OAAQC,EADCH,EACDG,SAAUC,EADTJ,EACSI,QAASC,EADlBL,EACkBK,MAEvCC,EAAU,GA6ChB,MA3CwB,oBAAbL,GACPK,EAAQC,KACJhD,EAAAjC,EAAAC,cAACiF,EAAA,EAAD,CACIhC,IAAI,SACJ9C,UAAWT,EAAI+B,OACfyD,KAAK,QACLC,UAAWN,EACXO,QAASV,GALb,WAYc,oBAAXC,GACPI,EAAQC,KACJhD,EAAAjC,EAAAC,cAACiF,EAAA,EAAD,CACIhC,IAAI,OACJN,KAAK,UACLxC,UAAWT,EAAI+B,OACfyD,KAAK,OACLC,UAAWN,IAAYC,EACvBM,QAAST,GANb,SAagB,oBAAbC,GACPG,EAAQC,KACJhD,EAAAjC,EAAAC,cAACiF,EAAA,EAAD,CACIhC,IAAI,SACJN,KAAK,SACLxC,UAAWT,EAAI+B,OACfyD,KAAK,SACLE,QAASR,GALb,WAYDG,SA7DwBnF,IAAMyF,eCoCvCC,cAIF,SAAAA,EAAYxF,GAAmB,IAAAyF,EAAA,OAAAtF,OAAAuF,EAAA,EAAAvF,CAAAkE,KAAAmB,IAC3BC,EAAAtF,OAAAwF,EAAA,EAAAxF,CAAAkE,KAAAlE,OAAAyF,EAAA,EAAAzF,CAAAqF,GAAAK,KAAAxB,KAAMrE,KAED8F,aAAeL,EAAKK,aAAaC,KAAlB5F,OAAA6F,EAAA,EAAA7F,QAAA6F,EAAA,EAAA7F,CAAAsF,KACpBA,EAAKQ,0BAA4BR,EAAKQ,0BAA0BF,KAA/B5F,OAAA6F,EAAA,EAAA7F,QAAA6F,EAAA,EAAA7F,CAAAsF,KAGjCA,EAAKS,cAAgBT,EAAKS,cAAcH,KAAnB5F,OAAA6F,EAAA,EAAA7F,QAAA6F,EAAA,EAAA7F,CAAAsF,KACrBA,EAAKU,cAAgBV,EAAKU,cAAcJ,KAAnB5F,OAAA6F,EAAA,EAAA7F,QAAA6F,EAAA,EAAA7F,CAAAsF,KARMA,wEAWV,IAAAW,EAAA/B,KAAAD,EACgCC,KAAKrE,MAA9CyD,EADSW,EACTX,GAAI4C,EADKjC,EACLiC,UAAWC,EADNlC,EACMkC,MAAOC,EADbnC,EACamC,OAAQC,EADrBpC,EACqBoC,OAEhCC,EAAYC,IAAQjD,IAAc,QAAPA,EAAwB8C,EAATC,EAE1CnD,EAAY,CACdI,KACA4C,aAGJ,OACInE,EAAAjC,EAAAC,cAACyG,EAAA,EAAD,CACIvD,MAAOkD,EACPjD,UAAWA,EACXuD,KAAMvC,KAAKwC,UACXC,QAASzC,KAAK6B,eAEb,SAAC9C,GACE,OACIlB,EAAAjC,EAAAC,cAACyG,EAAA,EAAD,CACIF,SAAUA,EACVpD,UAAWA,EACXmD,OAAQJ,EAAKD,cACbY,YAAaX,EAAKH,0BAClBa,QAASV,EAAKF,eAEb,SACGc,EACAC,GAEA,OAAOb,EAAKN,aAAa1C,EAAO4D,EAAIC,4CAU5DC,EACAC,EACAF,GACG,IAoCCG,EApCDC,EAAAhD,KAAAM,EAUCN,KAAKrE,MARLyD,EAFDkB,EAEClB,GACA4C,EAHD1B,EAGC0B,UACAtE,EAJD4C,EAIC5C,KACAN,EALDkD,EAKClD,SACA6C,EANDK,EAMCL,MACAC,EAPDI,EAOCJ,OACAO,EARDH,EAQCG,SACQwC,EATT3C,EASC4C,OAGEC,EAAUN,EAAGM,SAAWP,EAAGO,QAC3BvF,EAAQiF,EAAGrD,KAAOqD,EAAGrD,KAAKC,YAAS2D,EACnCC,EAAQR,EAAGQ,OAAST,EAAGS,MACvB3C,EAAUhD,EAAK4F,kBACf3C,EC5HC,SAAS4C,EAAYC,GAChC,OAAc,MAAVA,GAIGC,IAAMD,EAAQ,SAAAE,GACjB,OAAa,MAATA,KAIAC,IAAcD,IACPH,EAAYG,KDiHTH,CAAY7F,EAAKkG,kBACzBC,EACe,kBAAV5D,EAAqBA,EAAQA,EAAMrC,EAAOuF,EAASE,GACxDS,EAAa,WACfd,EAAKrH,MAAM+B,KAAKqG,wBAAwB,SAACC,EAAK/E,GACrC+E,GACDlB,EAAO,CACH9D,UAAW,CACPI,KACA4C,YACApD,MAAM9C,OAAA6D,EAAA,EAAA7D,CAAA,GAAMmD,EAAP,CAAeG,aAMlC6E,EAAe,WACjBjB,EAAKrH,MAAM+B,KAAKwG,eAKflE,KAAKwC,WAAoB,MAAPS,IACnBF,EAAe,WACXH,EAAGuB,OACErB,OAAO,CACJV,SAAUa,EACVjE,UAAW,CACPI,KACA4C,eAGPoC,KAAK,SAACC,GACqB,oBAAb5D,GACPA,MAGP6D,MAAMtB,EAAKnB,iBAIxB,IAAM0C,EAAInH,EAAS,CACfM,OACAgD,UACAC,QACAwC,UACAvF,UAGA4G,EAAmBD,EASvB,OAPS,MAALA,GAAyC,MAA3BA,EAAmB/F,OACjCgG,EACKD,EAAmB/F,OAASiG,WACtBF,EAAmB5I,MAAMyB,SAC1BA,GAIVS,EAAAjC,EAAAC,cAAC6I,EAAA,EAAD,CAAMC,SAAUxB,GACZtF,EAAAjC,EAAAC,cAACiC,EAAA,EAAD,KACKrC,IAAMmJ,SAASC,IAAIL,EAAkB,SAACM,EAAOC,GAC1C,IAAMjG,EAAMiG,EAAIC,UAEhB,OAAY,IAARD,EAEIlH,EAAAjC,EAAAC,cAACwB,EAAA,EAAD,CAAUyB,IAAKA,GACXjB,EAAAjC,EAAAC,cAACoJ,EAAD,CACIhF,MAAO4D,EACPnD,QAASA,EACTC,MAAOA,EACPT,OAAQA,EACRM,OAAQsD,EACRvD,SAAU0D,EACVxD,SAAUsC,IAEb+B,GAKNjH,EAAAjC,EAAAC,cAACwB,EAAA,EAAD,CAAUyB,IAAKA,GAAMgG,yCAQ5C,IAAM1F,EAAKY,KAAKrE,MAAMyD,GAEtB,OAAOiD,IAAQjD,IAAc,QAAPA,oDAGQI,GAAgC,IAAA0F,EACnClF,KAAKrE,MAAxB+B,EADsDwH,EACtDxH,KAAMyH,EADgDD,EAChDC,SAEdzH,EAAKwG,cAEDlE,KAAKwC,WAAiC,oBAAb2C,GACzBA,EAAS3F,EAAKC,OAAOL,0CAIPiE,GAClB+B,IAAa/B,MAAM,CACf3E,QAAS2E,EAAM3E,gDAKnBQ,EACAC,GACI,IAAAkG,EACyBrF,KAAKrE,MAA1BqG,EADJqD,EACIrD,UAKRnD,EACI,SAPAwG,EACepD,MAQf,CAAE7C,GAPKD,EAAeK,KACpBL,EAAeK,KAAKC,OAAOL,GAC3BY,KAAKrE,MAAMyD,GAKP4C,aACNhC,KAAKsF,kBACLpG,EACAC,6CAKJ,IAAMC,EAAKY,KAAKrE,MAAMyD,GAChBH,EAASe,KAAKrE,MAAM+B,KAAK6H,iBAE/B,OAAOzJ,OAAA6D,EAAA,EAAA7D,CAAA,GAAKmD,EAAZ,CAAoBG,cA/MwB3D,IAAM+J,WAmN1CC,MAAKvD,OAAO,CAAEwD,KAAM,mBAApBD,CACZtE,qDE1PI5D,EAAaC,IAAbD,SAUaoI,mLACI,IAAAvE,EAAApB,KACTgC,EAAchC,KAAKrE,MAAnBqG,UACF4D,EAAW5F,KAAK6F,SAAS,MAIzB3F,EAAS,WACXkB,EAAK0E,SAAS1E,EAAK2E,cAAc,KAQrC,OACIlI,EAAAjC,EAAAC,cAACmK,EAAD,CACI5G,GAAIwG,EACJ5D,UAAWA,EACX/B,MAhBM,SAACgG,GACX,OAAOA,EAASA,EAAOP,KAAO,IAgB1BzD,MAAOzF,IACP0F,OAAQxF,IACRyF,OAAQvF,IACRsG,OAAQpG,IACRqI,SAfS,SAAC/F,GACd,IAAM8G,EAAM9E,EAAK2E,cAAc,GAE/B3E,EAAK0E,SAAL,GAAAnH,OAAiBuH,EAAjB,KAAAvH,OAAwBS,KAapBqB,SAAUP,EACVA,OAAQA,GAEP,SAAA/C,GAGgC,IAF7BO,EAE6BP,EAF7BO,KAE6BC,EAAAR,EAD7BS,aAC6B,IAAAD,EADrB,GACqBA,EACrBM,EAAsBP,EAAtBO,kBAER,OACIJ,EAAAjC,EAAAC,cAACsK,EAAA,SAAD,KACItI,EAAAjC,EAAAC,cAACuK,EAAA,EAAD,CAAKC,OAAQ,IACTxI,EAAAjC,EAAAC,cAACyK,EAAA,EAAD,CAAKC,GAAI,IACL1I,EAAAjC,EAAAC,cAAA,gBACIgC,EAAAjC,EAAAC,cAAA,yBACAgC,EAAAjC,EAAAC,cAACyC,EAAD,CACIZ,KAAMA,EACNE,MAAOA,EAAM8H,OAEjB7H,EAAAjC,EAAAC,cAAC4B,EAAD,CACIC,KAAMA,EACNE,MAAOA,EAAM4I,gBAIzB3I,EAAAjC,EAAAC,cAACyK,EAAA,EAAD,CAAKC,GAAI,IACL1I,EAAAjC,EAAAC,cAAA,gBACIgC,EAAAjC,EAAAC,cAAA,6BACAgC,EAAAjC,EAAAC,cAACiC,EAAA,EAAKC,KAAN,KACKE,EACG,sBACA,CACIwI,cAAe,UACfvI,aAAcwI,IACV9I,EACA,uBACA,IAPXK,CAUCJ,EAAAjC,EAAAC,cAAC8K,EAAA,EAAD,oBAKlB9I,EAAAjC,EAAAC,cAACuK,EAAA,EAAD,KACIvI,EAAAjC,EAAAC,cAACyK,EAAA,EAAD,CAAKC,GAAI,IACL1I,EAAAjC,EAAAC,cAAA,gBACIgC,EAAAjC,EAAAC,cAAA,2BACAgC,EAAAjC,EAAAC,cAACiC,EAAA,EAAKC,KAAN,CAAWC,MAAM,SACZC,EACG,kBACA,CACIC,aAAcwI,IACV9I,EACA,kBACA,IAEJO,MAAO,CACH,CACIM,UAAU,EACVC,QACI,sBAER,CACIN,IAAK,KAfpBH,CAoBGJ,EAAAjC,EAAAC,cAAC+K,EAAD,CACIvI,KAAM,GACNwI,UAAW,EACXpI,UAAQ,mBAlGbqI","file":"static/js/16.751b2b14.chunk.js","sourcesContent":["import { PageHeader as Header } from 'antd';\nimport { PageHeaderProps } from 'antd/lib/page-header';\nimport cn from 'classnames';\nimport React from 'react';\nconst css = require('./page-header.module.scss');\n\nexport interface Props extends PageHeaderProps {}\n\nexport const PageHeader = React.memo<Props>((props: Props) => {\n    return <Header {...props} className={cn(css.ph, props.className)} />;\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ph\":\"page-header_ph__1jMB9\"};","import gql from 'graphql-tag';\n\nexport const findQuery = gql`\n    query findScripts($projectId: String!, $query: Query) {\n        output(projectId: $projectId, query: $query)\n            @rest(\n                type: \"[Script]\"\n                path: \"/projects/{args.projectId}/scripts?{args.query}\"\n            ) {\n            paging\n            data\n        }\n    }\n`;\n\nexport const getQuery = gql`\n    query findScriptsQuery($projectId: String!, $id: String!) {\n        output(projectId: $projectId, id: $id)\n            @rest(\n                type: \"Script\"\n                path: \"/projects/{args.projectId}/scripts/{args.id}\"\n            ) {\n            id\n            rev\n            createdAt\n            name\n            description\n            execution\n            persistence\n        }\n    }\n`;\n\nexport const createMutation = gql`\n    mutation createScriptMutation($projectId: String!, $input: Script!) {\n        output(projectId: $projectId, input: $input)\n            @rest(method: \"POST\", path: \"projects/{args.projectId}/scripts\") {\n            id\n            rev\n        }\n    }\n`;\n\nexport const updateMutation = gql`\n    mutation updateScriptMutation(\n        $projectId: String!\n        $id: String!\n        $input: Script!\n    ) {\n        output(projectId: $projectId, id: $id, input: $input)\n            @rest(\n                method: \"PUT\"\n                path: \"projects/{args.projectId}/scripts/{args.id}\"\n            ) {\n            id\n            rev\n        }\n    }\n`;\n\nexport const deleteMutation = gql`\n    mutation deleteScriptMutation($projectId: String!, $id: String!) {\n        output(projectId: $projectId, id: $id)\n            @rest(\n                method: \"DELETE\"\n                path: \"/projects/{args.projectId}/scripts/{args.id}\"\n            ) {\n            id\n            rev\n        }\n    }\n`;\n\nexport const runMutation = gql`\n    mutation runScriptMutation(\n        $projectId: String!\n        $id: String!\n        $input: ExecutionInput!\n    ) {\n        output(projectId: $projectId, id: $id, input: $input)\n            @rest(method: \"POST\", path: \"/projects/{args.projectId}/exec\") {\n            jobId\n        }\n    }\n`;\n","import { Card } from 'antd';\nimport cn from 'classnames';\nimport React from 'react';\n\nconst css = require('./card.module.scss');\n\nexport interface Props extends React.Props<any> {\n    className?: string;\n}\n\nexport const FormCard = React.memo<Props>(({ children, className }: Props) => {\n    return <Card className={cn(css.card, className)}>{children}</Card>;\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__3zxNn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"panel_button__1fWh9\"};","import { Form, Input } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport React from 'react';\n\nconst { TextArea } = Input;\n\nexport interface Props extends FormComponentProps {\n    value?: string;\n}\n\nexport default function DescriptionField({ form, value = '' }: Props): any {\n    return (\n        <Form.Item label=\"Description\">\n            {form.getFieldDecorator('description', {\n                initialValue: value,\n                rules: [\n                    {\n                        min: 10,\n                    },\n                ],\n            })(<TextArea rows={3} />)}\n        </Form.Item>\n    );\n}\n","import { Form, Input } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport React from 'react';\n\nexport interface Props extends FormComponentProps {\n    value?: string;\n    type?: string;\n}\n\nexport default function NameField({ form, value = '', type = '' }: Props): any {\n    return (\n        <Form.Item label=\"Name\">\n            {form.getFieldDecorator('name', {\n                initialValue: value,\n                rules: [\n                    {\n                        required: true,\n                        message: `Please input ${type} name!`,\n                    },\n                    {\n                        min: 3,\n                    },\n                ],\n            })(<Input />)}\n        </Form.Item>\n    );\n}\n","import { DataProxy } from 'apollo-cache';\nimport { DocumentNode } from 'apollo-link';\nimport { FetchResult, MutationUpdaterFn } from 'react-apollo';\nimport { MutationResultData } from './result';\n\nexport function updateFormCache(\n    key: string,\n    query: DocumentNode,\n    variables: any,\n    values: any,\n    cache: DataProxy,\n    mutationResult: FetchResult<MutationResultData>,\n): void {\n    // not new item\n    if (values.id != null) {\n        const q = cache.readQuery<any>({ query, variables });\n        const current = q[key] as object;\n        const metadata = mutationResult.data ? mutationResult.data.output : {};\n        const next = { ...current, ...metadata, ...values };\n\n        cache.writeQuery<any>({\n            query,\n            data: {\n                [key]: next,\n            },\n        });\n    }\n}\n\nexport function createFormCacheUpdator(\n    key: string,\n    query: DocumentNode,\n    variables: any,\n    values?: any,\n): MutationUpdaterFn<any> {\n    return (\n        cache: DataProxy,\n        mutationResult: FetchResult<MutationResultData>,\n    ) => {\n        return updateFormCache(\n            key,\n            query,\n            variables,\n            values,\n            cache,\n            mutationResult,\n        );\n    };\n}\n","import { Button } from 'antd';\nimport React from 'react';\nimport { PageHeader } from '../page-header/page-header';\n\nconst css = require('./panel.module.scss');\n\nexport interface Props {\n    className?: string;\n    title: string;\n    touched?: boolean;\n    valid?: boolean;\n    onBack?: () => void;\n    onCancel?: () => void;\n    onSave?: (input: any) => void;\n    onDelete?: () => void;\n}\n\nexport default class FormPanel extends React.PureComponent<Props> {\n    public render(): any {\n        const { title, onBack } = this.props;\n\n        return (\n            <PageHeader\n                title={title}\n                onBack={onBack}\n                extra={this.__renderButtons()}\n            />\n        );\n    }\n\n    private __renderButtons(): any {\n        const { onCancel, onSave, onDelete, touched, valid } = this.props;\n\n        const buttons = [];\n\n        if (typeof onCancel === 'function') {\n            buttons.push(\n                <Button\n                    key=\"cancel\"\n                    className={css.button}\n                    icon=\"close\"\n                    disabled={!touched}\n                    onClick={onCancel}\n                >\n                    Cancel\n                </Button>,\n            );\n        }\n\n        if (typeof onSave === 'function') {\n            buttons.push(\n                <Button\n                    key=\"save\"\n                    type=\"primary\"\n                    className={css.button}\n                    icon=\"save\"\n                    disabled={!touched || !valid}\n                    onClick={onSave}\n                >\n                    Save\n                </Button>,\n            );\n        }\n\n        if (typeof onDelete === 'function') {\n            buttons.push(\n                <Button\n                    key=\"delete\"\n                    type=\"danger\"\n                    className={css.button}\n                    icon=\"delete\"\n                    onClick={onDelete}\n                >\n                    Delete\n                </Button>,\n            );\n        }\n\n        return buttons;\n    }\n}\n","import { Form, Spin, notification } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { DataProxy } from 'apollo-cache';\nimport { ApolloError } from 'apollo-client';\nimport { DocumentNode, FetchResult } from 'apollo-link';\nimport isEmpty from 'lodash/isEmpty';\nimport React, { Fragment, ReactElement } from 'react';\nimport {\n    Mutation,\n    MutationFunc,\n    MutationResult,\n    Query,\n    QueryResult,\n} from 'react-apollo';\nimport isFormValid from '../../../common/form/is-valid';\nimport { updateFormCache } from '../../../common/graphql/mutation/cache-update';\nimport { MutationResultData } from '../../../common/graphql/mutation/result';\nimport { QueryResultData } from '../../../common/graphql/query/result';\nimport { Entity } from '../../../models/api/model/entity';\nimport { FormCard } from './card';\nimport Panel from './panel';\n\nexport interface FormContext<T extends Entity> extends FormComponentProps {\n    value?: T;\n    loading: boolean;\n    touched: boolean;\n    valid: boolean;\n}\n\nexport type TitleFn = (data: any, loading: boolean, err?: Error) => string;\n\nexport interface Props {\n    projectId: string;\n    title: TitleFn | string;\n    id?: string;\n    className?: string;\n    fetch: DocumentNode;\n    create: DocumentNode;\n    update: DocumentNode;\n    delete?: DocumentNode;\n    onCreate?: (id: string) => void;\n    onDelete?: () => void;\n    onBack?: () => void;\n    children: (props: FormContext<any>) => React.ReactNode;\n}\n\ninterface InnerProps extends Props, FormComponentProps {}\n\ninterface State {\n    rev?: string;\n    refresh: boolean;\n}\n\nclass FormContainer<T extends Entity = any> extends React.Component<\n    InnerProps,\n    State\n> {\n    constructor(props: InnerProps) {\n        super(props);\n\n        this.__renderForm = this.__renderForm.bind(this);\n        this.__handleCompletedMutation = this.__handleCompletedMutation.bind(\n            this,\n        );\n        this.__handleError = this.__handleError.bind(this);\n        this.__updateCache = this.__updateCache.bind(this);\n    }\n\n    public render(): any {\n        const { id, projectId, fetch, create, update } = this.props;\n\n        const mutation = !isEmpty(id) && id !== 'new' ? update : create;\n\n        const variables = {\n            id,\n            projectId,\n        };\n\n        return (\n            <Query\n                query={fetch}\n                variables={variables}\n                skip={this.__isNew()}\n                onError={this.__handleError}\n            >\n                {(query: QueryResult<QueryResultData<T>>) => {\n                    return (\n                        <Mutation\n                            mutation={mutation}\n                            variables={variables}\n                            update={this.__updateCache}\n                            onCompleted={this.__handleCompletedMutation}\n                            onError={this.__handleError}\n                        >\n                            {(\n                                fn: MutationFunc,\n                                mr: MutationResult<MutationResultData>,\n                            ) => {\n                                return this.__renderForm(query, fn, mr);\n                            }}\n                        </Mutation>\n                    );\n                }}\n            </Query>\n        );\n    }\n\n    private __renderForm(\n        qr: QueryResult<QueryResultData<T>>,\n        mutate: MutationFunc,\n        mr: MutationResult<MutationResultData>,\n    ): any {\n        const {\n            id,\n            projectId,\n            form,\n            children,\n            title,\n            onBack,\n            onDelete,\n            delete: del,\n        } = this.props;\n\n        const loading = qr.loading || mr.loading;\n        const value = qr.data ? qr.data.output : undefined;\n        const error = qr.error || mr.error;\n        const touched = form.isFieldsTouched();\n        const valid = isFormValid(form.getFieldsError());\n        const titleStr =\n            typeof title === 'string' ? title : title(value, loading, error);\n        const handleSave = () => {\n            this.props.form.validateFieldsAndScroll((err, values) => {\n                if (!err) {\n                    mutate({\n                        variables: {\n                            id,\n                            projectId,\n                            input: { ...values, id },\n                        },\n                    });\n                }\n            });\n        };\n        const handleCancel = () => {\n            this.props.form.resetFields();\n        };\n\n        let handleDelete: () => void;\n\n        if (!this.__isNew() && del != null) {\n            handleDelete = () => {\n                mr.client\n                    .mutate({\n                        mutation: del,\n                        variables: {\n                            id,\n                            projectId,\n                        },\n                    })\n                    .then((_: FetchResult) => {\n                        if (typeof onDelete === 'function') {\n                            onDelete();\n                        }\n                    })\n                    .catch(this.__handleError);\n            };\n        }\n\n        const c = children({\n            form,\n            touched,\n            valid,\n            loading,\n            value,\n        });\n\n        let resolvedChildren = c;\n\n        if (c != null && (c as ReactElement).type != null) {\n            resolvedChildren =\n                (c as ReactElement).type === Fragment\n                    ? (c as ReactElement).props.children\n                    : children;\n        }\n\n        return (\n            <Spin spinning={loading}>\n                <Form>\n                    {React.Children.map(resolvedChildren, (child, idx) => {\n                        const key = idx.toFixed();\n\n                        if (idx === 0) {\n                            return (\n                                <FormCard key={key}>\n                                    <Panel\n                                        title={titleStr}\n                                        touched={touched}\n                                        valid={valid}\n                                        onBack={onBack}\n                                        onSave={handleSave}\n                                        onCancel={handleCancel}\n                                        onDelete={handleDelete}\n                                    />\n                                    {child}\n                                </FormCard>\n                            );\n                        }\n\n                        return <FormCard key={key}>{child}</FormCard>;\n                    })}\n                </Form>\n            </Spin>\n        );\n    }\n\n    private __isNew(): boolean {\n        const id = this.props.id;\n\n        return isEmpty(id) || id === 'new';\n    }\n\n    private __handleCompletedMutation(data: MutationResultData): void {\n        const { form, onCreate } = this.props;\n\n        form.resetFields();\n\n        if (this.__isNew() && typeof onCreate === 'function') {\n            onCreate(data.output.id);\n        }\n    }\n\n    private __handleError(error: ApolloError): void {\n        notification.error({\n            message: error.message,\n        });\n    }\n\n    private __updateCache(\n        cache: DataProxy,\n        mutationResult: FetchResult<MutationResultData>,\n    ): void {\n        const { projectId, fetch } = this.props;\n        const id = mutationResult.data\n            ? mutationResult.data.output.id\n            : this.props.id;\n\n        updateFormCache(\n            'output',\n            fetch,\n            { id, projectId },\n            this.__getFormValues(),\n            cache,\n            mutationResult,\n        );\n    }\n\n    private __getFormValues(): any {\n        const id = this.props.id;\n        const values = this.props.form.getFieldsValue();\n\n        return { ...values, id };\n    }\n}\n\nexport default (Form.create({ name: 'form_container ' })(\n    FormContainer,\n) as any) as React.SFC<Props>;\n","import every from 'lodash/every';\nimport isPlainObject from 'lodash/isPlainObject';\n\nexport default function isFormValid(errors: any): boolean {\n    if (errors == null) {\n        return false;\n    }\n\n    return every(errors, field => {\n        if (field == null) {\n            return true;\n        }\n\n        if (isPlainObject(field)) {\n            return isFormValid(field);\n        }\n\n        return false;\n    });\n}\n","import { Checkbox, Col, Form, Input, Row } from 'antd';\nimport get from 'lodash/get';\nimport React, { Fragment } from 'react';\nimport { ScriptEntity } from '../../../../../../models/api/model/scriptEntity';\nimport {\n    createMutation,\n    deleteMutation,\n    getQuery,\n    updateMutation,\n} from '../../../../../../queries/script';\nimport DescriptionField from '../../../../../common/form/fields/descr';\nimport NameField from '../../../../../common/form/fields/name';\nimport Container, { FormContext } from '../../../../../common/form/form';\nimport { Page, PageProps } from '../../../../../common/page';\n\nconst { TextArea } = Input;\n\nexport interface Params {\n    id: string;\n}\n\nexport interface Props extends PageProps<Params> {\n    projectId: string;\n}\n\nexport default class ScriptDetailsPage extends Page<Params, Props> {\n    public render(): any {\n        const { projectId } = this.props;\n        const scriptId = this.getParam('id');\n        const title = (script?: ScriptEntity) => {\n            return script ? script.name : '';\n        };\n        const onBack = () => {\n            this.navigate(this.slicePathBack(1));\n        };\n        const onCreate = (id: string) => {\n            const str = this.slicePathBack(1);\n\n            this.navigate(`${str}/${id}`);\n        };\n\n        return (\n            <Container\n                id={scriptId}\n                projectId={projectId}\n                title={title}\n                fetch={getQuery}\n                create={createMutation}\n                update={updateMutation}\n                delete={deleteMutation}\n                onCreate={onCreate}\n                onDelete={onBack}\n                onBack={onBack}\n            >\n                {({\n                    form,\n                    value = {} as ScriptEntity,\n                }: FormContext<ScriptEntity>) => {\n                    const { getFieldDecorator } = form;\n\n                    return (\n                        <Fragment>\n                            <Row gutter={16}>\n                                <Col lg={12}>\n                                    <fieldset>\n                                        <legend>General</legend>\n                                        <NameField\n                                            form={form}\n                                            value={value.name}\n                                        />\n                                        <DescriptionField\n                                            form={form}\n                                            value={value.description}\n                                        />\n                                    </fieldset>\n                                </Col>\n                                <Col lg={12}>\n                                    <fieldset>\n                                        <legend>Persistence</legend>\n                                        <Form.Item>\n                                            {getFieldDecorator(\n                                                'persistence.enabled',\n                                                {\n                                                    valuePropName: 'checked',\n                                                    initialValue: get(\n                                                        value,\n                                                        'persistence.enabled',\n                                                        false,\n                                                    ),\n                                                },\n                                            )(<Checkbox>Enable</Checkbox>)}\n                                        </Form.Item>\n                                    </fieldset>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col lg={24}>\n                                    <fieldset>\n                                        <legend>Execution</legend>\n                                        <Form.Item label=\"Query\">\n                                            {getFieldDecorator(\n                                                'execution.query',\n                                                {\n                                                    initialValue: get(\n                                                        value,\n                                                        'execution.query',\n                                                        '',\n                                                    ),\n                                                    rules: [\n                                                        {\n                                                            required: true,\n                                                            message:\n                                                                'Input script query',\n                                                        },\n                                                        {\n                                                            min: 8,\n                                                        },\n                                                    ],\n                                                },\n                                            )(\n                                                <TextArea\n                                                    rows={10}\n                                                    minLength={8}\n                                                    required\n                                                />,\n                                            )}\n                                        </Form.Item>\n                                    </fieldset>\n                                </Col>\n                            </Row>\n                        </Fragment>\n                    );\n                }}\n            </Container>\n        );\n    }\n}\n"],"sourceRoot":""}
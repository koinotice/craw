// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ExecutionCause Execution Cause
//
// Execution cause
// swagger:model execution-cause
type ExecutionCause string

const (

	// ExecutionCauseUnknown captures enum value "unknown"
	ExecutionCauseUnknown ExecutionCause = "unknown"

	// ExecutionCauseManual captures enum value "manual"
	ExecutionCauseManual ExecutionCause = "manual"

	// ExecutionCauseSchedule captures enum value "schedule"
	ExecutionCauseSchedule ExecutionCause = "schedule"

	// ExecutionCauseHook captures enum value "hook"
	ExecutionCauseHook ExecutionCause = "hook"
)

// for schema
var executionCauseEnum []interface{}

func init() {
	var res []ExecutionCause
	if err := json.Unmarshal([]byte(`["unknown","manual","schedule","hook"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		executionCauseEnum = append(executionCauseEnum, v)
	}
}

func (m ExecutionCause) validateExecutionCauseEnum(path, location string, value ExecutionCause) error {
	if err := validate.Enum(path, location, value, executionCauseEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this execution cause
func (m ExecutionCause) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateExecutionCauseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
